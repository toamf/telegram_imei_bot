import asyncio
import json
import logging
from typing import Dict

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import ClientSession, ClientError
from stdnum.imei import is_valid

from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher()


async def fetch_imei_info(imei: str) -> Dict:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± IMEI —á–µ—Ä–µ–∑ API."""
    url = f"{Config.IMEI_CHECK_API_URL}/checks"
    headers = {
        "Authorization": f"Bearer {Config.IMEI_CHECK_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = json.dumps({
        "deviceId": imei,
        "serviceId": Config.SERVICE_ID
    })

    async with ClientSession() as session:
        try:
            async with session.post(url, headers=headers, data=payload) as response:
                response_text = await response.text()
                logger.info(f"API Response (POST): {response.status} - {response_text}")

                if response.status == 201:
                    response_json = await response.json()
                    check_id = response_json.get("id")

                    if check_id:
                        results = await asyncio.gather(get_imei_result(check_id))
                        return results[0]

                return {"error": f"–û—à–∏–±–∫–∞ API: {response.status}, {response_text}"}
        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            return {"error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"}


async def get_imei_result(check_id: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI –ø–æ ID."""
    url = f"{Config.IMEI_CHECK_API_URL}/checks/{check_id}"
    headers = {
        "Authorization": f"Bearer {Config.IMEI_CHECK_TOKEN}",
        "Content-Type": "application/json"
    }

    async with ClientSession() as session:
        try:
            async with session.get(url, headers=headers) as response:
                response_text = await response.text()
                logger.info(f"API Response (GET): {response.status} - {response_text}")

                if response.status == 200:
                    return await response.json()

                return {"error": f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {response.status}, {response_text}"}
        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            return {"error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"}


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await message.answer("üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


@dp.message(F.text)
async def handle_imei(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç IMEI, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    imei = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IMEI
    if not is_valid(imei):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await bot.send_chat_action(message.chat.id, action="typing")
    imei_info = await fetch_imei_info(imei)

    if "error" in imei_info:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {imei_info['error']}")
        return

    properties = imei_info.get("properties", {})
    response = (
        f"üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IMEI {imei}:\n"
        f"üîπ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {properties.get('deviceName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üîπ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {properties.get('serial', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üîπ –°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {properties.get('purchaseCountry', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üîπ FMI: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if properties.get('fmiOn', False) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîπ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ GSMA: {'üö® –í —Å–ø–∏—Å–∫–µ' if properties.get('gsmaBlacklisted', False) else '‚úÖ –ß–∏—Å—Ç—ã–π'}\n"
    )
    await message.answer(response)


@dp.message()
async def unknown_message(message: Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ)."""
    await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ IMEI –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
